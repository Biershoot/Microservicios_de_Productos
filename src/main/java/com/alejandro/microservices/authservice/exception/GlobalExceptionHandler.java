package com.alejandro.microservices.authservice.exception;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;

/**
 * üõ°Ô∏è Manejador Global de Excepciones - Gesti√≥n Centralizada de Errores
 * 
 * Esta clase proporciona manejo centralizado de excepciones para toda la aplicaci√≥n.
 * Asegura respuestas de error consistentes en todos los endpoints y c√≥digos HTTP
 * apropiados para diferentes tipos de errores.
 * 
 * Caracter√≠sticas principales:
 * - Formato JSON consistente de respuesta de error
 * - C√≥digos HTTP apropiados para cada tipo de excepci√≥n
 * - Timestamp para seguimiento y debugging de errores
 * - Mensajes de error conscientes de seguridad (sin exposici√≥n de datos sensibles)
 * - Cobertura comprehensiva de excepciones
 * 
 * Beneficios:
 * - Mejor consistencia de API
 * - Mejor manejo de errores para clientes
 * - Seguridad mejorada (sin stack traces en producci√≥n)
 * - Debugging y monitoreo m√°s f√°cil
 * 
 * @author Alejandro Arango Calder√≥n
 * @version 1.0
 * @since 2024
 */
@RestControllerAdvice
public class GlobalExceptionHandler {

    /**
     * üë§ Manejar conflictos de registro de usuario
     * 
     * Ocurre cuando se intenta registrar un usuario con un username existente.
     * Retorna HTTP 409 Conflict con respuesta de error estructurada.
     * 
     * @param ex UserAlreadyExistsException
     * @return ResponseEntity con detalles del error de conflicto
     */
    @ExceptionHandler(UserAlreadyExistsException.class)
    public ResponseEntity<?> handleUserAlreadyExists(UserAlreadyExistsException ex) {
        Map<String, Object> error = new HashMap<>();
        error.put("timestamp", LocalDateTime.now());
        error.put("status", HttpStatus.CONFLICT.value());
        error.put("error", "User already exists");
        error.put("message", ex.getMessage());

        return new ResponseEntity<>(error, HttpStatus.CONFLICT); // ‚úÖ 409 Conflict
    }

    /**
     * üîê Manejar fallos de autenticaci√≥n
     * 
     * Ocurre cuando las credenciales de login son inv√°lidas (username/password incorrectos).
     * Retorna HTTP 401 Unauthorized con mensaje de error gen√©rico por seguridad.
     * 
     * @param ex BadCredentialsException
     * @return ResponseEntity con detalles del error de no autorizado
     */
    @ExceptionHandler(BadCredentialsException.class)
    public ResponseEntity<?> handleBadCredentials(BadCredentialsException ex) {
        Map<String, Object> error = new HashMap<>();
        error.put("timestamp", LocalDateTime.now());
        error.put("status", HttpStatus.UNAUTHORIZED.value());
        error.put("error", "Invalid credentials");
        error.put("message", "Invalid username or password"); // üîí Mensaje gen√©rico por seguridad

        return new ResponseEntity<>(error, HttpStatus.UNAUTHORIZED); // ‚úÖ 401 Unauthorized
    }

    /**
     * üë§ Manejar errores de usuario no encontrado
     * 
     * Ocurre cuando se intenta acceder a un usuario que no existe en el sistema.
     * Retorna HTTP 404 Not Found con mensaje amigable para el usuario.
     * 
     * @param ex UsernameNotFoundException
     * @return ResponseEntity con detalles del error de no encontrado
     */
    @ExceptionHandler(UsernameNotFoundException.class)
    public ResponseEntity<?> handleUsernameNotFound(UsernameNotFoundException ex) {
        Map<String, Object> error = new HashMap<>();
        error.put("timestamp", LocalDateTime.now());
        error.put("status", HttpStatus.NOT_FOUND.value());
        error.put("error", "User not found");
        error.put("message", ex.getMessage());

        return new ResponseEntity<>(error, HttpStatus.NOT_FOUND); // ‚úÖ 404 Not Found
    }

    /**
     * üìù Manejar errores de validaci√≥n
     * 
     * Ocurre cuando los datos de la solicitud fallan en validaci√≥n (campos requeridos faltantes, formato inv√°lido, etc.).
     * Retorna HTTP 400 Bad Request con detalles del error de validaci√≥n.
     * 
     * @param ex MethodArgumentNotValidException
     * @return ResponseEntity con detalles del error de validaci√≥n
     */
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<?> handleValidationErrors(MethodArgumentNotValidException ex) {
        Map<String, Object> error = new HashMap<>();
        error.put("timestamp", LocalDateTime.now());
        error.put("status", HttpStatus.BAD_REQUEST.value());
        error.put("error", "Validation error");
        error.put("message", "Invalid input data");

        return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST); // ‚úÖ 400 Bad Request
    }

    /**
     * üö® Manejar errores generales/inesperados
     * 
     * Manejador catch-all para cualquier excepci√≥n no manejada. Proporciona manejo
     * elegante de errores y previene fuga de informaci√≥n sensible.
     * Retorna HTTP 500 Internal Server Error.
     * 
     * @param ex Excepci√≥n gen√©rica
     * @return ResponseEntity con detalles del error interno del servidor
     */
    @ExceptionHandler(Exception.class)
    public ResponseEntity<?> handleGeneralError(Exception ex) {
        Map<String, Object> error = new HashMap<>();
        error.put("timestamp", LocalDateTime.now());
        error.put("status", HttpStatus.INTERNAL_SERVER_ERROR.value());
        error.put("error", "Internal server error");
        error.put("message", ex.getMessage());

        return new ResponseEntity<>(error, HttpStatus.INTERNAL_SERVER_ERROR); // ‚úÖ 500 Internal Server Error
    }
} 